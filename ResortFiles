import java.io.*;
import java.nio.channels.FileChannel;

public class Main {

    //存放重新分类后的素材文件夹
    private static String resultFileName = "分类好的素材";

    public static void main(String[] args) {
        //新建存放结果的文件夹
        File resultFile = new File(resultFileName);
        if (!resultFile.exists())
            resultFile.mkdir();

        //读取素材文件夹
        File pictureFile = new File("./files");
        File[] pictureList = pictureFile.listFiles();

        for (int i = 0; i < pictureList.length; i++) {
            File sizeFile = new File(pictureList[i].getAbsolutePath());
            File[] sizeList = sizeFile.listFiles();
            //读取尺寸文件夹
            for (int j = 0; j < sizeList.length; j++) {
                //创建目标文件夹
                File resultSizeFile = new File(resultFileName + "/" + sizeList[j].getName() + "/" + pictureList[i].getName());
                if (!resultSizeFile.exists())
                    resultSizeFile.mkdirs();
            }
        }

        //读取品牌文件夹
        for (int i = 0; i < pictureList.length; i++) {
            //System.out.println(pictureList[i].getAbsolutePath());
            File sizeFile = new File(pictureList[i].getAbsolutePath());
            File[] sizeList = sizeFile.listFiles();
            //读取尺寸文件夹
            for (int j = 0; j < sizeList.length; j++) {
                //进入尺寸文件夹
                File file = new File(sizeList[i].getAbsolutePath());
                File[] fileList = file.listFiles();
                for (int k = 0; k < fileList.length; k++) {
                    //复制文件
                    File targetFile = new File(resultFileName + "/" + sizeList[j].getName() + "/" + pictureList[i].getName()+"/"+fileList[k].getName());
                    nioTransferCopy(fileList[k],targetFile);
                }
            }
        }
    }


    //复制文件
    private static void nioTransferCopy(File source, File target) {
        FileChannel in = null;
        FileChannel out = null;
        FileInputStream inStream = null;
        FileOutputStream outStream = null;
        try {
            inStream = new FileInputStream(source);
            outStream = new FileOutputStream(target);
            in = inStream.getChannel();
            out = outStream.getChannel();
            in.transferTo(0, in.size(), out);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                inStream.close();
                in.close();
                outStream.close();
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }
}
